import React, { useState, useEffect } from "react";
import {
  StyleSheet,
  Text,
  View,
  ScrollView,
  ActivityIndicator,
  TouchableOpacity,
  SafeAreaView,
  RefreshControl,
} from "react-native";
import { StatusBar } from "expo-status-bar";

export default function VulnerabilityTable() {
  const [typeData, setTypeData] = useState(null);
  const [impactData, setImpactData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState("types");
  const [refreshing, setRefreshing] = useState(false);

  const fetchData = async () => {
    setLoading(true);
    setError(null);

    try {
      // Fetch vulnerability types data
      const typesResponse = await fetch(
        "https://acs-hackathon-backend.onrender.com/scrape-by-type"
      );
      const typesData = await typesResponse.json();

      // Fetch impact types data
      const impactResponse = await fetch(
        "https://acs-hackathon-backend.onrender.com/scrape-by-impact-types"
      );
      const impactData = await impactResponse.json();

      // console.log('Types Data:', typesData); // Log the data to check its structure
      // console.log('Impact Data:', impactData); // Log the data to check its structure

      // Transform impact data to an array format suitable for rendering
      const transformedImpactData = Object.keys(impactData).map((year) => ({
        year,
        ...impactData[year], // Spread the impact data for each year
      }));

      // Transform type data to an array format suitable for rendering
      const transformedTypeData = Object.keys(typesData).map((year) => ({
        year,
        ...typesData[year], // Spread the type data for each year
      }));

      setTypeData(transformedTypeData); // Set transformed type data
      setImpactData(transformedImpactData); // Set transformed impact data
    } catch (err) {
      console.error("Error fetching data:", err);
      setError("Failed to fetch vulnerability data. Please try again later.");
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  const onRefresh = () => {
    setRefreshing(true);
    fetchData();
  };

  useEffect(() => {
    fetchData();
  }, []);

  // Function to determine cell background color based on value
  const getCellColor = (value) => {
    // Converting to number and handling edge cases
    const numValue = Number(value) || 0;

    if (numValue === 0) return "#ffdddd";
    if (numValue < 100) return "#ffcccc";
    if (numValue < 500) return "#ff9999";
    if (numValue < 1000) return "#ff6666";
    if (numValue < 2000) return "#ff3333";
    return "#cc0000";
  };

  // Render loading state
  if (loading && !refreshing) {
    return (
      <SafeAreaView style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#0066cc" />
        <Text style={styles.loadingText}>Loading vulnerability data...</Text>
        <StatusBar style="auto" />
      </SafeAreaView>
    );
  }

  // Render error state
  if (error) {
    return (
      <SafeAreaView style={styles.errorContainer}>
        <Text style={styles.errorText}>{error}</Text>
        <TouchableOpacity style={styles.retryButton} onPress={fetchData}>
          <Text style={styles.retryButtonText}>Retry</Text>
        </TouchableOpacity>
        <StatusBar style="auto" />
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <Text style={styles.title}>Vulnerabilities Dashboard</Text>

      {/* Tab navigation */}
      <View style={styles.tabContainer}>
        <TouchableOpacity
          style={[styles.tabButton, activeTab === "types" && styles.activeTab]}
          onPress={() => setActiveTab("types")}
        >
          <Text
            style={[
              styles.tabText,
              activeTab === "types" && styles.activeTabText,
            ]}
          >
            By Types
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tabButton, activeTab === "impact" && styles.activeTab]}
          onPress={() => setActiveTab("impact")}
        >
          <Text
            style={[
              styles.tabText,
              activeTab === "impact" && styles.activeTabText,
            ]}
          >
            By Impact
          </Text>
        </TouchableOpacity>
      </View>

      <ScrollView
        style={styles.tableContainer}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        {activeTab === "types" && typeData && (
          <ScrollView horizontal>
            <View>
              {/* Header Row */}
              <View style={styles.headerRow}>
                <Text style={[styles.headerCell, styles.yearCell]}>Year</Text>
                <Text style={styles.headerCell}>Overflow</Text>
                <Text style={styles.headerCell}>Memory Corruption</Text>
                <Text style={styles.headerCell}>Sql Injection</Text>
                <Text style={styles.headerCell}>XSS</Text>
                <Text style={styles.headerCell}>Directory Traversal</Text>
                <Text style={styles.headerCell}>File Inclusion</Text>
                <Text style={styles.headerCell}>CSRF</Text>
                <Text style={styles.headerCell}>XXE</Text>
                <Text style={styles.headerCell}>SSRF</Text>
                <Text style={styles.headerCell}>Open Redirect</Text>
                <Text style={styles.headerCell}>Input Validation</Text>
              </View>

              {/* Data Rows */}
              {typeData.map((row, index) => (
                <View key={index} style={styles.dataRow}>
                  <Text style={[styles.dataCell, styles.yearCell]}>
                    {row.year}
                  </Text>
                  <Text
                    style={[
                      styles.dataCell,
                      { backgroundColor: getCellColor(row.Overflow) },
                    ]}
                  >
                    {row.Overflow}
                  </Text>
                  <Text
                    style={[
                      styles.dataCell,
                      {
                        backgroundColor: getCellColor(row["Memory Corruption"]),
                      },
                    ]}
                  >
                    {row["Memory Corruption"]}
                  </Text>
                  <Text
                    style={[
                      styles.dataCell,
                      { backgroundColor: getCellColor(row["Sql Injection"]) },
                    ]}
                  >
                    {row["Sql Injection"]}
                  </Text>
                  <Text
                    style={[
                      styles.dataCell,
                      { backgroundColor: getCellColor(row.XSS) },
                    ]}
                  >
                    {row.XSS}
                  </Text>
                  <Text
                    style={[
                      styles.dataCell,
                      {
                        backgroundColor: getCellColor(
                          row["Directory Traversal"]
                        ),
                      },
                    ]}
                  >
                    {row["Directory Traversal"]}
                  </Text>
                  <Text
                    style={[
                      styles.dataCell,
                      { backgroundColor: getCellColor(row["File Inclusion"]) },
                    ]}
                  >
                    {row["File Inclusion"]}
                  </Text>
                  <Text
                    style={[
                      styles.dataCell,
                      { backgroundColor: getCellColor(row.CSRF) },
                    ]}
                  >
                    {row.CSRF}
                  </Text>
                  <Text
                    style={[
                      styles.dataCell,
                      { backgroundColor: getCellColor(row.XXE) },
                    ]}
                  >
                    {row.XXE}
                  </Text>
                  <Text
                    style={[
                      styles.dataCell,
                      { backgroundColor: getCellColor(row.SSRF) },
                    ]}
                  >
                    {row.SSRF}
                  </Text>
                  <Text
                    style={[
                      styles.dataCell,
                      { backgroundColor: getCellColor(row["Open Redirect"]) },
                    ]}
                  >
                    {row["Open Redirect"]}
                  </Text>
                  <Text
                    style={[
                      styles.dataCell,
                      {
                        backgroundColor: getCellColor(row["Input Validation"]),
                      },
                    ]}
                  >
                    {row["Input Validation"]}
                  </Text>
                </View>
              ))}
            </View>
          </ScrollView>
        )}

        {activeTab === "impact" && impactData && (
          <ScrollView horizontal>
            <View>
              {/* Header Row */}
              <View style={styles.headerRow}>
                <Text style={[styles.headerCell, styles.yearCell]}>Year</Text>
                <Text style={styles.headerCell}>Code Execution</Text>
                <Text style={styles.headerCell}>Bypass</Text>
                <Text style={styles.headerCell}>Privilege Escalation</Text>
                <Text style={styles.headerCell}>Denial of Service</Text>
                <Text style={styles.headerCell}>Information Leak</Text>
              </View>

              {/* Data Rows */}
              {impactData.map((row, index) => (
                <View key={index} style={styles.dataRow}>
                  <Text style={[styles.dataCell, styles.yearCell]}>
                    {row.year}
                  </Text>
                  <Text
                    style={[
                      styles.dataCell,
                      { backgroundColor: getCellColor(row["Code Execution"]) },
                    ]}
                  >
                    {row["Code Execution"]}
                  </Text>
                  <Text
                    style={[
                      styles.dataCell,
                      { backgroundColor: getCellColor(row.Bypass) },
                    ]}
                  >
                    {row.Bypass}
                  </Text>
                  <Text
                    style={[
                      styles.dataCell,
                      {
                        backgroundColor: getCellColor(
                          row["Privilege Escalation"]
                        ),
                      },
                    ]}
                  >
                    {row["Privilege Escalation"]}
                  </Text>
                  <Text
                    style={[
                      styles.dataCell,
                      {
                        backgroundColor: getCellColor(row["Denial of Service"]),
                      },
                    ]}
                  >
                    {row["Denial of Service"]}
                  </Text>
                  <Text
                    style={[
                      styles.dataCell,
                      {
                        backgroundColor: getCellColor(row["Information Leak"]),
                      },
                    ]}
                  >
                    {row["Information Leak"]}
                  </Text>
                </View>
              ))}
            </View>
          </ScrollView>
        )}
      </ScrollView>
      <StatusBar style="auto" />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#111",
    padding: 40,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#111",
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: "#eee",
  },
  errorContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
    backgroundColor: "#eee",
  },
  errorText: {
    fontSize: 16,
    color: "#eee",
    textAlign: "center",
    marginBottom: 20,
  },
  retryButton: {
    backgroundColor: "#eee",
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 5,
  },
  retryButtonText: {
    color: "#111",
    fontSize: 16,
  },
  title: {
    fontSize: 22,
    fontWeight: "bold",
    textAlign: "center",
    marginVertical: 15,
    color: "#eee",
  },
  tabContainer: {
    flexDirection: "row",
    marginBottom: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#111",
  },
  tabButton: {
    flex: 1,
    paddingVertical: 12,
    alignItems: "center",
  },
  activeTab: {
    borderBottomWidth: 2,
    borderBottomColor: "#6722A8",
  },
  tabText: {
    fontSize: 16,
    color: "#eee",
  },
  activeTabText: {
    color: "#6722A8",
    fontWeight: "bold",
  },
  tableContainer: {
    flex: 1,
  },
  headerRow: {
    flexDirection: "row",
    backgroundColor: "#1E1E1E",
    borderBottomWidth: 1,
    borderBottomColor: "#111",
  },
  headerCell: {
    width: 110,
    padding: 10,
    textAlign: "center",
    fontWeight: "bold",
    color: "#eee",
  },
  yearCell: {
    width: 70,
    color: "#ff6b6b",
    fontWeight: "bold",
  },
  dataRow: {
    flexDirection: "row",
    borderBottomWidth: 1,
    borderBottomColor: "#ddd",
  },
  dataCell: {
    width: 110,
    padding: 10,
    textAlign: "center",
  },
  footer: {
    textAlign: "center",
    fontSize: 14,
    color: "#888",
    marginTop: 20,
    paddingBottom: 20,
  },
});
